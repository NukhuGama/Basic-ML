# -*- coding: utf-8 -*-
# """6. SkyLearn-Kmeans_Exer

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1K2cjXqmWlOMFmMytFB94jv37OHoWfp4a

# #Latihan SKLearn K-means

# #Tujuan
# #####Pada latihan kali ini, Anda akan belajar membuat model unsupervised learning dengan teknik K-Means Clustering.

# #**Tahapan Latihan**
# ######Tahapan pada latihan kali ini adalah sebagai berikut:

# 1. Konversi data menjadi Dataframe.
# 2. Lakukan preprocessing data.
# 3. Hilangkan kolom 'CustomerID' dan 'gender'.
# 4. Latih model K-Means.
# 5. Buat plot untuk Elbow dan Cluster.

# #**Codelab**
# #####Dataset yang akan Anda gunakan adalah data pengunjung sebuah mall fiktif. Dataset bisa Anda dapatkan pada [tautan](https://www.kaggle.com/datasets/vjchoudhary7/customer-segmentation-tutorial-in-python) berikut.

# Setelah Anda berhasil mengunduh datanya, buka Notebook pada Google Colab dan unggah dataset Mall Customer Segmentation Data pada session storage Google Colab.

# Pada cell pertama, kita ubah file csv kita ke dalam dataframe pandas dan menampilkan 3 baris pertama dari dataframe.
# """

import pandas as pd
#ubah file menjadi data frame
df = pd.read_csv('Mall_Customers.csv')


#tampilkan 3 baris pertama

df.head(3)

df.info()

# """#####Kemudian kita akan melakukan sedikit preprocessing yaitu mengubah nama kolom agar lebih seragam. Lalu kolom gender adalah kolom kategorik, maka kita akan mengubah data tersebut menjadi data numerik."""

#ubah nama kolom
df = df.rename(columns={'Gender': 'gender',
                        'Age'   : 'age',
                        'Annual Income (k$)' : 'annual_income',
                        'Spending Score (1-100)' : 'spending_score'

})

# df.head()
# ubah kata kategorik menjadi numerik
df['gender'].replace(['Female', 'Male'], [0, 1], inplace=True)

# Tampilkan data yang sudah diprocess
df.head(3)

# """#####Di tahap selanjutnya kita akan mengimpor K-Means. Di tahap ini juga kita akan menghilangkan kolom Customer ID dan gender karena kurang relevan untuk proses clustering. Selanjutnya kita akan menentukan nilai K yang optimal dengan metode Elbow. Library K-means dari SKLearn menyediakan fungsi untuk menghitung inersia dari K-Means dengan jumlah K tertentu. Di sini kita akan membuat list yang berisi inersia dari nilai K antara 1 sampai 11."""

from sklearn.cluster import KMeans

# menghilangkan kolom customer id dan gender
X = df.drop(['CustomerID', 'gender'], axis=1)
# X.head(3)
# membuat list yang berisi inertia

clusters = []

for i in range(1,11):
  km = KMeans(n_clusters=i).fit(X)

  clusters.append(km.inertia_)

# """#####Jalankan kode di bawah untuk membuat plot inersia dari setiap nilai K. Sesuai plot di bawah, kita bisa melihat bahwa elbow berada di nilai K sama dengan 5, di mana penurunan inersia tidak lagi signifikan setelah nilai K sama dengan 5. Jangan lupa mengimpor library yang dibutuhkan untuk membuat plot ya."""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns


fig, ax = plt.subplots(figsize=(8,4))
sns.lineplot(x=list(range(1,11)), y = clusters, ax=ax)
ax.set_title('Finding Elbow')
ax.set_xlabel('Clusters')
ax.set_ylabel('Inertia')

# """#####Terakhir kita bisa melatih kembali K-Means dengan jumlah K yang didapat dari metode Elbow. Lalu kita bisa membuat plot hasil pengklasteran K-Means dengan menjalankan kode di bawah."""

# membuat objek Kmeans

km5 = KMeans(n_clusters=5).fit(X)

#menambahkan kolom label pada dataset
X['Labels'] = km5.labels_

#membuat plot KMeans dengan 5 Cluster
plt.figure(figsize=(8,4))
sns.scatterplot(x=X['annual_income'], y=X['spending_score'], hue=X['Labels'],
                palette=sns.color_palette('hls', 5))
plt.title('KMeans with 5 Clusters')
plt.show